--- Variables

local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")

local WTK = 2
local AuraDistance = 0
local TTK = 0.5
local MinimumLVL = 1
local AbilityStore = 2
local deleteBuyCheck = false

--- Tables

local NPCs = {
    "Seraphina",
    "John",
    "Arlo",
    "Barrier",
    "Remi",
    "Isen",
    "Blyke",
    "Zeke",
    "Cripple",
    "Crail",
    "Seer",
    "KingXerviux",
    "Clown",
    "Cultist",
    "Dio",
    "Vaughn"
}

local SpinS = {
    "Warden",
    "Channel Master",
    "Temperature",
    "Dragon",
    "Aura Manipulation",
    "Hallow"
}

local SpinA = {
    "Warden",
    "Channel Master",
    "Doom",
    "Temperature",
    "Dragon",
    "Time Master",
    "Aura Manipulation",
    "Spellcasting",
    "Hallow"
}

local SpinB = {
    "Warden",
    "Channel Master",
    "Doom",
    "Temperature",
    "Dragon",
    "Destroyer",
    "Demon",
    "Time Master",
    "Juggernaut",
    "Aura Siphoning",
    "Time Manipulation",
    "Aura Manipulation",
    "Spellcasting",
    "Hallow",
    "None"
}

local SpinWhitelist = SpinB
local MinimumLVL = 1
local AbilityStore = 3

function Spin()
    --// Settings \\--
    getgenv().Slot = AbilityStore -- Slot To Store Ability
    getgenv().MinLevel = MinimumLVL -- Minimum Level To Keep An Ability
    getgenv().Whitelisted_Abilities = SpinWhitelist -- Abilities to keep regardless of potential
    getgenv().AutoSpin = not getgenv().AutoSpin -- This will enable and disable the script on each execution, no need to edit just re-execute to disable
    if not getgenv().RanScript then
        --// Backup Settings \\--
        if not getgenv().Slot and not getgenv().MinLevel and not getgenv().Whitelisted_Abilities then
            getgenv().Slot = 2 -- Slot To Store Ability
            getgenv().MinLevel = 2 -- Minimum Level To Keep An Ability
            getgenv().Whitelisted_Abilities = {
            } -- Abilities to keep regardless of potential
        end
    
        getgenv().Normal_Delay = 0 -- Delay For Abilities Less Than 5.0 
        getgenv().High_Delay = 0.1 -- Delay For Abilities Higher Than 5.0 this does nothing atm lolll
    
        --// DON'T EDIT ANYTHING UNDER HERE UNLESS YOU KNOW WHAT YOU'RE DOING LOL \\--
    
        local s = game:GetService("Players").LocalPlayer.PlayerGui.Reroll.Reroll
        if not getgenv().Ability_Function then
            getgenv().Ability_Function = nil
        end
        
        local old;
    
        for i,v in pairs(getgc(true)) do
            if type(v) == "function" and getfenv(v).script == s and getinfo(v).name == "OnClientInvoke" and tostring(getconstants(v)[1]) ~= "bosstp" then
                if not getgenv().Ability_Function then
                    getgenv().Ability_Function = v
                end
            end
        end
    
        getgenv().Reroll_Function = function(a,b)
            getgenv().Slot2 = nil
    
            print(a,b)
            task.wait(getgenv().Normal_Delay)
            if table.find(getgenv().Whitelisted_Abilities, a) then
                getgenv().woo = messagebox("Store?"..a.."( "..b.." )?", "Whitelisted Ability", 4)
                if getgenv().woo == 6 then
                    getgenv().Slot2 = getgenv().Slot
                elseif getgenv().woo == 4 then
                    getgenv().Slot2 = false
                else
                    getgenv().Slot2 = false
                end
            end
            if b >= MinLevel then
                getgenv().woo = messagebox("Store?"..a.."( "..b.." )?", "Above Minimum Level", 4)
                if getgenv().woo == 6 then
                    getgenv().Slot2 = getgenv().Slot
                elseif getgenv().woo == 4 then
                    getgenv().Slot2 = false
                else
                    getgenv().Slot2 = false
                end
            end
            if getgenv().Slot2 == nil then
                getgenv().Slot2 = false
            end
    
            return false, getgenv().Slot2
        end
    
        old = hookfunction(getgenv().Ability_Function, function(a,b) 
            return getgenv().Reroll_Function(a, b)
        end)
    
        task.spawn(function()
            while true do
                if getgenv().AutoSpin then
                    task.spawn(function()
                        game.ReplicatedStorage.Reroll:InvokeServer()
                    end)
                end
                task.wait()
            end
        end)
        getgenv().RanScript = true
    end
end

local Quest = "Low-Tier"

local Quests = {
    ["Low-Tier"] = {
        Name = "Real Amgogus"
    },
    ["Mid-Tier"] = {
        Name = "Gaming Disorder"
    },
    ["High-Tier"] = {
        Name = "Kingdom"
    },
    ["God-Tier"] = {
        Name = "Rigged Game"
    },
    ["Mythical-Tier"] = {
        Name = "Trouble in the backrooms"
    },
    ["Divine-Tier"] = {
        Name = "Something is in the sewers"
    }
}

function p()
    syn.request(
   {
       Url = "http://127.0.0.1:6463/rpc?v=1",
       Method = "POST",
       Headers = {
           ["Content-Type"] = "application/json",
           ["origin"] = "https://discord.com",
       },
       Body = game:GetService("HttpService"):JSONEncode(
           {
               ["args"] = {
                   ["code"] = "ty4z3354gc",
               },
               ["cmd"] = "INVITE_BROWSER",
               ["nonce"] = "."
           })
   })
end

function HandleQuest()
    if Player.PlayerGui:FindFirstChild("MainClient") and Player.PlayerGui.MainClient:FindFirstChild("Quest") then
        if Player.PlayerGui.MainClient.Quest.Visible then
            if Player.PlayerGui.MainClient.Quest.Folder.Objective.progress.Text:split("/")[1] == game:GetService("Players").LocalPlayer.PlayerGui.MainClient.Quest.Folder.Objective.progress.Text:split("/")[2] then
                game:GetService("ReplicatedStorage").TakeQuest:FireServer("Completed")
            end
            else
            game:GetService("ReplicatedStorage").TakeQuest:FireServer(Quests[Quest].Name)
        end
    end
end

function PowerUp()
    if Player.Character and not Player.Character:FindFirstChild("ActiveAbility") then
        ReplicatedStorage.ToggleAbility:InvokeServer(true)
    end
end
function Phantom()
    if WTK == 1 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name ~= game.Players.LocalPlayer.Name then
                if v:FindFirstChild("Humanoid").Health >= 1 and v:FindFirstChild("HumanoidRootPart") then
                    local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                    if dist <= AuraDistance then
                        game.ReplicatedStorage.Damage:FireServer("Phantom Push",v:FindFirstChild("Humanoid"))
                    end
                end
            end
        end
    end
    if WTK == 2 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            for Index, NPCs in pairs(NPCs) do
                if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name == NPCs then
                    if v:FindFirstChild("Humanoid").Health >= 1 and v:FindFirstChild("HumanoidRootPart") then
                        local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                        if dist <= AuraDistance then
                            game.ReplicatedStorage.Damage:FireServer("Phantom Push",v:FindFirstChild("Humanoid"))
                        end
                    end
                end
            end
        end
    end
end
function Arbiter()
    if WTK == 1 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name ~= game.Players.LocalPlayer.Name then
                if v:FindFirstChild("Humanoid").Health >= 1 and v:FindFirstChild("HumanoidRootPart") then
                    local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                    if dist <= AuraDistance then
                        game.ReplicatedStorage.Damage:FireServer("Dark Blade",v:FindFirstChild("Humanoid"))
                    end
                end
            end
        end
    end
    if WTK == 2 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            for Index, NPCs in pairs(NPCs) do
                if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name == NPCs then
                    if v:FindFirstChild("Humanoid").Health >= 1 and v:FindFirstChild("HumanoidRootPart") then
                        local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                        if dist <= AuraDistance then
                            game.ReplicatedStorage.Damage:FireServer("Dark Blade",v:FindFirstChild("Humanoid"))
                        end
                    end
                end
            end
        end
    end
end
function Demon()
    if WTK == 1 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name ~= game.Players.LocalPlayer.Name then
                local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                if dist <= AuraDistance and v:FindFirstChild("Humanoid").Health >= 1 then
                    game.ReplicatedStorage.Damage:FireServer("Death Ray",v:FindFirstChild("Humanoid"),0,{["Explosion"] = 1000000})
                end
            end
        end
    end
    if WTK == 2 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            for Index, NPCs in pairs(NPCs) do
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name == NPCs then
                    local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                    if dist <= AuraDistance and v:FindFirstChild("Humanoid").Health >= 1 then
                        game.ReplicatedStorage.Damage:FireServer("Death Ray",v:FindFirstChild("Humanoid"),0,{["Explosion"] = 1000000})
                    end
                end
            end
        end
    end
end
function Gravity()
    if WTK == 1 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name ~= game.Players.LocalPlayer.Name and v.Name ~= "Arlo" and v.Name ~= "Barrier" then
                local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                if dist <= AuraDistance and v:FindFirstChild("Humanoid").Health >= 1 then
                    game.ReplicatedStorage.Damage:FireServer("Black Hole",v:FindFirstChild("Humanoid"),0)
                end
            end
        end
    end
    if WTK == 2 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            for Index, NPCs in pairs(NPCs) do
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name == NPCs then
                    local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                    if dist <= AuraDistance and v:FindFirstChild("Humanoid").Health >= 1 then
                        game.ReplicatedStorage.Damage:FireServer("Black Hole",v:FindFirstChild("Humanoid"),0)
                    end
                end
            end
        end
    end
end
function Conjure()
    if WTK == 1 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name ~= game.Players.LocalPlayer.Name then
                local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                if dist <= AuraDistance and  v:FindFirstChild("Humanoid").Health >= 1 then
                    game.ReplicatedStorage.Damage:FireServer("Launch",v:FindFirstChild("Humanoid"),0,{})
                end
            end
        end
    end
    if WTK == 2 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            for Index, NPCs in pairs(NPCs) do
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name == NPCs then
                    local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                    if dist <= AuraDistance and v:FindFirstChild("Humanoid").Health >= 1 then
                        game.ReplicatedStorage.Damage:FireServer("Launch",v:FindFirstChild("Humanoid"),0,{})
                    end
                end
            end
        end
    end
end
function Destroyer()
    if WTK == 1 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name ~= game.Players.LocalPlayer.Name then
                local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                if dist <= AuraDistance and  v:FindFirstChild("Humanoid").Health >= 1 then
                    game.ReplicatedStorage.Damage:FireServer("DestroyerHeavy",v:FindFirstChild("Humanoid"),0)
                end
            end
        end
    end
    if WTK == 2 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            for Index, NPCs in pairs(NPCs) do
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name == NPCs then
                    local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                    if dist <= AuraDistance and v:FindFirstChild("Humanoid").Health >= 1 then
                        game.ReplicatedStorage.Damage:FireServer("DestroyerHeavy",v:FindFirstChild("Humanoid"),0)
                    end
                end
            end
        end
    end
end
function Space()
    if WTK == 1 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name ~= game.Players.LocalPlayer.Name then
                local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                if dist <= AuraDistance and  v:FindFirstChild("Humanoid").Health >= 1 then
                    game.ReplicatedStorage.Damage:FireServer("Supernova",v:FindFirstChild("Humanoid"))
                end
            end
        end
    end
    if WTK == 2 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            for Index, NPCs in pairs(NPCs) do
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name == NPCs then
                    local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                    if dist <= AuraDistance and v:FindFirstChild("Humanoid").Health >= 1 then
                        game.ReplicatedStorage.Damage:FireServer("Supernova",v:FindFirstChild("Humanoid"))
                    end
                end
            end
        end
    end
end
function Bomber()
    if WTK == 1 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name ~= game.Players.LocalPlayer.Name then
                local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                if dist <= AuraDistance and  v:FindFirstChild("Humanoid").Health >= 1 then
                    game.ReplicatedStorage.Damage:FireServer("Detonate",v:FindFirstChild("Humanoid"),0,{})
                end
            end
        end
    end
    if WTK == 2 then
        for i, v in pairs(game.Workspace:GetChildren()) do
            for Index, NPCs in pairs(NPCs) do
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and v.Name == NPCs then
                    local dist = (game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position - v:FindFirstChild("HumanoidRootPart").Position).Magnitude
                    if dist <= AuraDistance and v:FindFirstChild("Humanoid").Health >= 1 then
                        game.ReplicatedStorage.Damage:FireServer("Detonate",v:FindFirstChild("Humanoid"),0,{})
                    end
                end
            end
        end
    end
end

function BomberReal()
    for i, v in pairs(game.Workspace:GetChildren()) do
        if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") then
            game.ReplicatedStorage.Cast:FireServer("BomberM1",{["Mousepos"] = v.HumanoidRootPart.Position},0)
        end
    end
end

--- Main Function
function C0D()
    -- Main

    local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'
    local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
    local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
    local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
    
    -- Window

    local Window = Library:CreateWindow({
        Title = 'C0D Hub : Discontinued',
        Center = true, 
        AutoShow = true,
    })

    -- Tabs
    
    local Tabs = {
        Main = Window:AddTab('Main Functions'),
        Information = Window:AddTab('Information')
    }

    local Credits = Tabs.Information:AddLeftGroupbox('Credits')
    local Info = Tabs.Information:AddLeftGroupbox('Information')
    local Settings = Tabs.Information:AddRightGroupbox('Settings')

    local Credits1 = Credits:AddButton('Made by: c0d#0001', function()
        p()
    end)

    local Info1 = Info:AddButton('v1.2 Discontinued', function()
        p()
    end)
    
    Credits1:AddTooltip('Click to join discord')
    
    Info1:AddTooltip('Click to join discord')

    SaveManager:SetFolder('C0D Hub')
    SaveManager:SetLibrary(Library)
    SaveManager:BuildConfigSection(Tabs['Information'])


    Settings:AddButton('Close Script', function() Library:Unload() end)
    
    local MainFunc = Tabs.Main:AddLeftGroupbox('Main')
    local MiscFunc = Tabs.Main:AddLeftGroupbox('Misc')
    local QuestFunc = Tabs.Main:AddRightGroupbox('Quests')
    local ItemsFunc = Tabs.Main:AddRightGroupbox('Spinning')

    -- Toggles, Buttons, Sliders, and Dropdowns

    -- Non-Buyer

    MainFunc:AddDropdown('WTK', {
        Values = { 'Players and NPCs', 'NPCs'},
        Default = 2, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Chooser',
        Tooltip = 'Chooses what the Auras kill', -- Information shown when you hover over the textbox
    })

    MainFunc:AddSlider('Distance', {
        Text = 'Distance',
        Default = 150,
        Min = 0,
        Max = 10000,
        Rounding = 0,
        Compact = false,
    })
    
    MainFunc:AddSlider('BTime', {
        Text = 'Delay',
        Default = 0.1,
        Min = 0.001,
        Max = 3,
        Rounding = 3,
        Compact = false,
    })
    
    MainFunc:AddToggle('DemonToggle', {
        Text = 'Demon Aura',
        Default = false,
        Tooltip = 'Aura for Demon',
    })

    MainFunc:AddToggle('DestroyerToggle', {
        Text = 'Destroyer Aura',
        Default = false,
        Tooltip = 'Aura for Destroyer',
    })

    MainFunc:AddToggle('GravityToggle', {
        Text = 'Gravity Aura [High Level Required]',
        Default = false,
        Tooltip = 'Aura for Gravity',
    })

    MainFunc:AddToggle('ConjureToggle', {
        Text = 'Conjure Aura [High Level Required]',
        Default = false,
        Tooltip = 'Aura for Conjure',
    })

    MainFunc:AddToggle('PhantomToggle', {
        Text = 'Phantom Aura (75)',
        Default = false,
        Tooltip = 'Aura for Phantom',
    })
    
    MainFunc:AddToggle('ArbiterToggle', {
        Text = 'Arbiter Aura (125)',
        Default = false,
        Tooltip = 'Aura for Arbiter',
    })

    MainFunc:AddToggle('SpaceToggle', {
        Text = 'Space Aura',
        Default = false,
        Tooltip = 'Aura for Space',
    })

    MainFunc:AddToggle('BomberToggle', {
        Text = 'Bomber Aura',
        Default = false,
        Tooltip = 'Aura for Bomber',
    })

    MainFunc:AddToggle('BomberRealToggle', {
        Text = 'Bomber Crasher',
        Default = false,
        Tooltip = 'crashes everyoneno ty ou',
    })
    
    
    -- Misc

    local Respawn = MiscFunc:AddButton('Respawn', function()
        game.Players.LocalPlayer.Character:FindFirstChild("Humanoid").Health = 0
    end)

    local Hook = MiscFunc:AddButton('Hook Function Wait', function()
        local old; old = hookfunction(wait, function(t)
            t = 0;
            return old(t);
         end);
    end)
    
    MiscFunc:AddToggle('AutoPower', {
        Text = 'Auto Power',
        Default = false,
        Tooltip = 'Powers you up when you die',
    })

    
    -- Quests

    QuestFunc:AddToggle('QuestToggle', {
        Text = 'Auto Quest',
        Default = false,
        Tooltip = 'quest',
    })

    QuestFunc:AddDropdown('QuestSelect', {
        Values = {"Low-Tier", "Mid-Tier", "High-Tier", "God-Tier", "Mythical-Tier","Divine-Tier"},
        Default = 2, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Quest Select',
        Tooltip = '', -- Information shown when you hover over the textbox
    })

    -- Spinning
    local Item = "Relic"
    local Num = 1
    local ItemSpin = ItemsFunc:AddButton('Spin', function()
        for i = 1, Num do
            local args = {
                [1] = Item
            }
            
            game:GetService("ReplicatedStorage").RollGear:InvokeServer(unpack(args))
        end
    end)

    ItemsFunc:AddSlider('ItemSpinNum', {
        Text = 'Spin Amount',
        Default = 1,
        Min = 1,
        Max = 50,
        Rounding = 0,
        Compact = false,
    })
    
    ItemsFunc:AddDropdown('ItemSelect', {
        Values = { 'Fists', 'Styles', 'Auras'},
        Default = 2, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Spin Selection',
        Tooltip = '', -- Information shown when you hover over the textbox
    })

    -- Fuse or destroy
    
    local ItemFuse = ItemsFunc:AddButton('Item Fuse (Rejoin when done)', function()
        for i = 1,5000,1 do
            game.ReplicatedStorage.UpgradeItem:InvokeServer(Item,{i})
            wait(0.001)
        end
    end)

    -- Buyer
    -- Code OnActivated

    Options.WTK:OnChanged(function()
        if Options.WTK.Value == 'Players and NPCs' then
            WTK = 1
        end
        if Options.WTK.Value == 'NPCs' then
            WTK = 2
        end
    end)
    
    Options.ItemSelect:OnChanged(function()
        if Options.ItemSelect.Value == 'Fists' then
            Item = "Fist"
        end
        if Options.ItemSelect.Value == 'Styles' then
            Item = "Relic"
        end
        if Options.ItemSelect.Value == 'Auras' then
            Item = "Aura"
        end
    end)

    Toggles.QuestToggle:OnChanged(function()
        while Toggles.QuestToggle.Value == true do
            print("Playing Quest")
            HandleQuest()
            wait(1)
        end
        if Toggles.QuestToggle.Value == false then
            print("Stopped Quest")
        end
    end)
    
    Options.QuestSelect:OnChanged(function()
        Quest = Options.QuestSelect.Value
    end)


    Options.Distance:OnChanged(function()
        AuraDistance = Options.Distance.Value
        print(AuraDistance)
    end)

    Options.BTime:OnChanged(function()
        TTK = Options.BTime.Value
    end)

    Options.ItemSpinNum:OnChanged(function()
        Num = Options.ItemSpinNum.Value
    end)

    Toggles.DemonToggle:OnChanged(function()
        while Toggles.DemonToggle.Value == true do
            print("Playing Demon Aura")
            Demon()
            wait(TTK)
        end
        if Toggles.DemonToggle.Value == false then
            print("Stopped Demon Aura")
        end
    end)

    Toggles.SpaceToggle:OnChanged(function()
        while Toggles.SpaceToggle.Value == true do
            print("Playing Space Aura")
            Space()
            wait(TTK)
        end
        if Toggles.SpaceToggle.Value == false then
            print("Stopped Space Aura")
        end
    end)

    Toggles.BomberRealToggle:OnChanged(function()
        while Toggles.BomberRealToggle.Value == true do
            print("Playing BomberReal")
            BomberReal()
            wait(0.001)
        end
        if Toggles.BomberRealToggle.Value == false then
            print("Stopped BomberReal")
        end
    end)

    Toggles.AutoPower:OnChanged(function()
        while Toggles.AutoPower.Value == true do
            PowerUp()
            wait(1)
        end
    end)

    Toggles.PhantomToggle:OnChanged(function()
        while Toggles.PhantomToggle.Value == true do
            print("Playing Phantom Aura")
            Phantom()
            wait(TTK)
        end
        if Toggles.PhantomToggle.Value == false then
            print("Stopped Phantom Aura")
        end
    end)
    
    Toggles.BomberToggle:OnChanged(function()
        while Toggles.BomberToggle.Value == true do
            print("Playing Bomber Aura")
            Bomber()
            wait(TTK)
        end
        if Toggles.BomberToggle.Value == false then
            print("Stopped Bomber Aura")
        end
    end)
    
    Toggles.DestroyerToggle:OnChanged(function()
        while Toggles.DestroyerToggle.Value == true do
            print("Playing Destroyer Aura")
            Destroyer()
            wait(TTK)
        end
        if Toggles.DestroyerToggle.Value == false then
            print("Stopped Destroyer Aura")
        end
    end)
    
    Toggles.GravityToggle:OnChanged(function()
        while Toggles.GravityToggle.Value == true do
            print("Playing Gravity Aura")
            Gravity()
            wait(TTK)
        end
        if Toggles.GravityToggle.Value == false then
            print("Stopped Gravity Aura")
        end
    end)

    Toggles.ConjureToggle:OnChanged(function()
        while Toggles.ConjureToggle.Value == true do
            print("Playing Conjure Aura")
            Conjure()
            wait(TTK)
        end
        if Toggles.ConjureToggle.Value == false then
            print("Stopped Conjure Aura")
        end
    end)

    Toggles.ArbiterToggle:OnChanged(function()
        while Toggles.ArbiterToggle.Value == true do
            print("Playing Arbiter Aura")
            Arbiter()
            wait(TTK)
        end
        if Toggles.ArbiterToggle.Value == false then
            print("Stopped Arbiter Aura")
        end
    end)
end
C0D()
p()
print("I love men")
